<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
//Enemy Spawning
SecondsBetweenEnemySpawns = 2;
SecondsSinceLastEnemySpawn = 0;

SecondsBetweenBruteSpawns = 8;
SecondsSinceLastBruteSpawn = 2;

SecondsBetweenRacerSpawns = 5;
SecondsSinceLastRacerSpawn = 1;

rm_spd = (room_speed * 2);
minRange = 100;

//Get resolution
width = display_get_width();
height = display_get_height();

//Adjust view
view_wview = width/1.1;
view_hview = height/1.1;

//Adjust port
view_wport = width;
view_hport = height;

//Adjust Surface
surface_resize(application_surface, width, height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME
view_xview[0]=x-(view_wview[0]/2);
view_yview[0]=y-(view_hview[0]/2); 

x += (obj_GANGSTEREARTH.x - x) * .3;
y += (obj_GANGSTEREARTH.y - y) * .3;

///Spawn Enemies
SecondsSinceLastEnemySpawn += 1 / room_speed;
SecondsSinceLastBruteSpawn += 1 / room_speed;
SecondsSinceLastRacerSpawn += 1 / room_speed;

if SecondsSinceLastEnemySpawn &gt;= SecondsBetweenEnemySpawns {
    //Spawn Enemy
    instance_create(random(room_width), random(room_height), obj_enemy);
    SecondsSinceLastEnemySpawn = 0;
}

if SecondsSinceLastBruteSpawn &gt;= SecondsBetweenBruteSpawns {
    //Spawn Enemy
    instance_create(random(room_width), random(room_height), obj_brute);
    SecondsSinceLastBruteSpawn = 0;
}

if SecondsSinceLastRacerSpawn &gt;= SecondsBetweenRacerSpawns {
    //Spawn Enemy
    instance_create(384, 480, obj_racer)
    instance_create(1696, 480, obj_racer)
    SecondsSinceLastRacerSpawn = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
